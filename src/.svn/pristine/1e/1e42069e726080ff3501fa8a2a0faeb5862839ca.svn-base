import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import PropTypes from 'prop-types';
import { TextField } from '@material-ui/core';
import { makeStyles } from '@material-ui/styles';
import Autocomplete from '@material-ui/lab/Autocomplete';
import {
  activityCategoryDropdownListFetch
} from 'actions';
import { isEmpty, includes, isArray, forEach, find } from 'lodash'

const useStyles = makeStyles(theme => ({
  root: {}
}));

const ActivityCategoryDropdown = props => {
  const { clientIds, userIds, ActivityCategoryValue, setActivityCategoryValue, selectedId, activityCategoryOnChange, id, name, size, renderInput, showSelectAllOption, ...attr } = props;
  const classes = useStyles();
  const dispatch = useDispatch();

  const activityCategoryState = useSelector(state => state.activityCategoryState);
  const [activityCategoryList, setActivityCategoryList] = useState([]);
  const [campIds, setCampIds] = useState(clientIds);
  const [LocalUserIds, setLocalUserIds] = useState(userIds);

  useEffect(() => {
    let camp_ids = [];
    if (!includes(campIds, 'all')) {
      camp_ids = campIds;
    }

    let user_ids = [];
    if (!includes(LocalUserIds, 'all')) {
      user_ids = LocalUserIds;
    }
    
    dispatch(activityCategoryDropdownListFetch(camp_ids, user_ids));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    setCampIds(clientIds);
  }, [clientIds]);

  useEffect(() => {
    setLocalUserIds(userIds);
  }, [userIds]);

  useEffect(() => {

    let camp_ids = [];
    if (!includes(campIds, 'all')) {
      camp_ids = campIds;
    }

    let user_ids = [];
    if (!includes(LocalUserIds, 'all')) {
      user_ids = LocalUserIds;
    }
    
    dispatch(activityCategoryDropdownListFetch(camp_ids, user_ids));

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [campIds, LocalUserIds]);

  useEffect(() => {
    if (activityCategoryState.activityCategoriesDropdownList) {
      
      if (!isEmpty(selectedId)) {
        if (isArray(selectedId)) {
          let scat = [];
          forEach(selectedId, function (value, key) {
            let item = find(activityCategoryState.activityCategoriesDropdownList, ['id', value]);
            if (!isEmpty(item)) {
              scat.push(item);
            }
          });
          setActivityCategoryValue(scat);

        }
        else {
          let scat = find(activityCategoryState.activityCategoriesDropdownList, ['id', selectedId]);
          
          if(!isEmpty(scat)){
            setActivityCategoryValue(scat);
          }
          else{
            setActivityCategoryValue(null);
          }
        }
      }

      let activity_category_list = {
        ...activityCategoryState.activityCategoriesDropdownList
      }
      activity_category_list = Object.values(activity_category_list);

      if (attr.multiple === true && !isEmpty(activity_category_list) && showSelectAllOption === true) {
        let first = {
          id: 'all',
          opt_display: 'All',
        }
        activity_category_list.unshift(first);
      }

      setActivityCategoryList(Object.values(activity_category_list));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [activityCategoryState.activityCategoriesDropdownList]);

  return (
    <>
      {(activityCategoryList) ?
        <Autocomplete
          value={ActivityCategoryValue}
          onChange={(event, newValue) => {
            activityCategoryOnChange(event, newValue)
          }}
          options={activityCategoryList}
          getOptionLabel={(option) => option.opt_display}
          id={id}
          size={size}
          name={name}
          renderInput={renderInput}
          {...attr}
        />

        : ''}
    </>
  );
}

ActivityCategoryDropdown.propTypes = {
  activityCategoryOnChange: PropTypes.any.isRequired,
  renderInput: PropTypes.any.isRequired
};

ActivityCategoryDropdown.defaultProps = {
  clientIds: [],
  ActivityCategoryValue: [],
  id: 'activity_category_id',
  name: 'activity_category_id',
  size: 'small',
  selectedId: '',
  showSelectAllOption: true
};

export default ActivityCategoryDropdown;
