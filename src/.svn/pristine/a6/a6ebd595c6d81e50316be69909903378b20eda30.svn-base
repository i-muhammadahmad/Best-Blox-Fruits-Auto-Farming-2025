import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import validate from 'validate.js';
import uuid from 'uuid/v1';
import { makeStyles } from '@material-ui/styles';
import { Header, PoDetailsItem } from './components';
import {
	addPurchaseOrders,
	hidePurchaseOrdersValidationError,
	redirectToPurchaseOrdersList,
	addRemoveOffices,
	vendorsDropdownListFetch
} from 'actions';
import {
	Card,
	CardHeader,
	CardContent,
	TextField,
	Grid,
	FormControl,
	FormHelperText,
	Table,
	TableBody,
	TableCell,
	TableContainer,
	TableHead,
	TableRow,
	Paper,
	MenuItem
} from '@material-ui/core';
import CloseIcon from '@material-ui/icons/Close';
import { Page, StyledButton, StyledFab } from 'components';
import Autocomplete from '@material-ui/lab/Autocomplete';
import CKEditor from '@ckeditor/ckeditor5-react';
import ClassicEditor from 'ckeditor5-custom-build/build/ckeditor';
import { isEmpty, find, remove, findIndex, forEach, times } from 'lodash';
import useRouter from 'utils/useRouter';
import moment from 'moment';
import SaveIcon from '@material-ui/icons/Save';
import CancelIcon from '@material-ui/icons/Cancel';
import AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';
import { OfficesDropdown, DocumentDropdown } from 'commonDropdowns';
import { CK_CONFIGS } from 'configs';
import { AddDocument } from 'components';

const useStyles = makeStyles(theme => ({
	root: {
		width: theme.breakpoints.values.lg,
		maxWidth: '100%',
		margin: '0 auto',
		padding: theme.spacing(3, 3, 6, 3)
	},
	projectDetails: {
		marginTop: theme.spacing(3)
	},
	formGroup: {
		marginBottom: theme.spacing(3)
	}
}));

const PurchaseOrdersAdd = () => {
	const classes = useStyles();
	const dispatch = useDispatch();
	const router = useRouter();
	const purchaseOrdersState = useSelector(state => state.purchaseOrdersState);
	const vendorsState = useSelector(state => state.vendorsState);
	const session = useSelector(state => state.session);

	const [vendor, setVendor] = useState(null);
	const [OfficeValue, setOfficeValue] = useState(null);
	const [poDetails, setPoDetails] = useState({});
	const [DocumentValue, setDocumentValue] = useState(null);

	const [schema, setSchema] = React.useState({
		purchase_order_number: {
			presence: { allowEmpty: false, message: '^P.O Number is required' }
		},
		date: {
			presence: { allowEmpty: false, message: '^P.O Date is required' }
		},
		vendor_id: {
			presence: { allowEmpty: false, message: '^Please Select Vendor' }
		},
		office_id: {
			presence: { allowEmpty: false, message: '^Please Select Office' }
		},
		document_id: {
			presence: { allowEmpty: false, message: '^Please Select Document' }
		}
	});

	const [formState, setFormState] = useState({
		isValid: false,
		values: {
			date: moment(moment().toDate()).format('YYYY-MM-DD'),
			office_id: session.user.employee.office_id,
			object_viewed_id: session.current_page_permissions.object_id
		},
		touched: {
			date: true,
			office_id: true,
			object_viewed_id: true
		},
		errors: {}
	});

	useEffect(() => {
		dispatch(vendorsDropdownListFetch());
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, []);

	useEffect(() => {
		const errors = validate(formState.values, schema);

		setFormState(formState => ({
			...formState,
			isValid: errors ? false : true,
			errors: errors || {}
		}));
	}, [formState.values]);

	useEffect(() => {
		if (!isEmpty(purchaseOrdersState.validation_error)) {
			const errors = purchaseOrdersState.validation_error;
			setFormState(formState => ({
				...formState,
				isValid: errors ? false : true,
				errors: errors || {}
			}));
		}
	}, [purchaseOrdersState.validation_error]);

	useEffect(() => {
		if (purchaseOrdersState.redirect_to_list) {
			router.history.push('/purchase-orders');
		}
	}, [purchaseOrdersState.redirect_to_list, router.history]);

	const addPODetail = async () => {
		let f_id = uuid();
		await setPoDetails(poDetails => ({
			...poDetails,
			[f_id]: {
				...poDetails[f_id],
				asset_details: '',
				quantity: '',
				id: f_id
			}
		}));

		await setSchema(schema => ({
			...schema,
			['asset_details_' + f_id]: {
				presence: { allowEmpty: false, message: '^Asset Details are required' }
			},
			['quantity_' + f_id]: {
				presence: { allowEmpty: false, message: '^Quantity is required' }
			}
		}));
	};

	const deletePoItem = id => {
		deletePoItem1(id);
	};

	const deletePoItem1 = async id => {
		let schema_arr = { ...schema };
		let formState_arr = { ...formState };
		let poDetails_arr = { ...poDetails };

		await delete poDetails_arr[id];
		await setPoDetails(poDetails_arr);

		//resting schema for validations
		await delete schema_arr['asset_details_' + id];
		await delete schema_arr['quantity_' + id];
		await setSchema(schema_arr);

		//resting form states
		await delete formState_arr['values']['asset_details_' + id];
		await delete formState_arr['values']['quantity_' + id];
		await delete formState_arr['touched']['asset_details_' + id];
		await delete formState_arr['touched']['quantity_' + id];
		await delete formState_arr['errors']['asset_details_' + id];
		await delete formState_arr['errors']['quantity_' + id];
		await setFormState(formState => ({
			...formState,
			values: {
				...formState_arr['values']
			},
			touched: {
				...formState_arr['touched']
			},
			errors: {
				...formState_arr['errors']
			}
		}));
	};

	const setDescription = description => {
		setFormState(formState => ({
			...formState,
			values: {
				...formState.values,
				description: description
			},
			touched: {
				...formState.touched,
				description: true
			}
		}));
		dispatch(hidePurchaseOrdersValidationError('description'));
	};

	const setVendorId = vendor_id => {
		setFormState(formState => ({
			...formState,
			values: {
				...formState.values,
				vendor_id: vendor_id
			},
			touched: {
				...formState.touched,
				vendor_id: true
			}
		}));
		dispatch(hidePurchaseOrdersValidationError('vendor_id'));
	};

	const officeOnChange = (event, newValue) => {
		if (newValue) {
			setOfficeValue(newValue);
			setOfficeId(newValue.id);
		} else {
			setOfficeValue(newValue);
			setOfficeId('');
		}
	};

	const setOfficeId = office_id => {
		setFormState(formState => ({
			...formState,
			values: {
				...formState.values,
				office_id: office_id
			},
			touched: {
				...formState.touched,
				office_id: true
			}
		}));
		dispatch(hidePurchaseOrdersValidationError('office_id'));
	};

	const documentOnChange = (event, newValue) => {
		if (newValue) {
			setDocumentValue(newValue);
			setDocumentId(newValue.id);
		} else {
			setDocumentValue(newValue);
			setDocumentId('');
		}
	};

	const setDocumentId = document_id => {
		setFormState(formState => ({
			...formState,
			values: {
				...formState.values,
				document_id: document_id
			},
			touched: {
				...formState.touched,
				document_id: true
			}
		}));
		dispatch(hidePurchaseOrdersValidationError('document_id'));
	};

	const handleChange = event => {
		event.persist();
		setFormState(formState => ({
			...formState,
			values: {
				...formState.values,
				[event.target.name]:
					event.target.type === 'checkbox'
						? event.target.checked
						: event.target.value
			},
			touched: {
				...formState.touched,
				[event.target.name]: true
			}
		}));
		dispatch(hidePurchaseOrdersValidationError(event.target.name));
	};

	const handleQuantityChange = (event, id) => {
		if (!isEmpty(poDetails[id])) {
			handleChange(event);

			setPoDetails(poDetails => ({
				...poDetails,
				[id]: {
					...poDetails[id],
					quantity: event.target.value
				}
			}));
		}
	};

	const handleUnitPriceChange = (event, id) => {
		if (!isEmpty(poDetails[id])) {
			handleChange(event);

			setPoDetails(poDetails => ({
				...poDetails,
				[id]: {
					...poDetails[id],
					unit_price: event.target.value
				}
			}));
		}
	};

	const handleExtendedPriceChange = (event, id) => {
		if (!isEmpty(poDetails[id])) {
			handleChange(event);

			setPoDetails(poDetails => ({
				...poDetails,
				[id]: {
					...poDetails[id],
					extended_price: event.target.value
				}
			}));
		}
	};

	const handleLocalCurrencyTotalChange = (event, id) => {
		if (!isEmpty(poDetails[id])) {
			handleChange(event);

			setPoDetails(poDetails => ({
				...poDetails,
				[id]: {
					...poDetails[id],
					local_currency_total: event.target.value
				}
			}));
		}
	};

	const handleDollarTotalChange = (event, id) => {
		if (!isEmpty(poDetails[id])) {
			handleChange(event);

			setPoDetails(poDetails => ({
				...poDetails,
				[id]: {
					...poDetails[id],
					dollar_total: event.target.value
				}
			}));
		}
	};

	const handleAssetDetailsChange = (event, desc, id) => {
		if (!isEmpty(poDetails[id])) {
			setFormState(formState => ({
				...formState,
				values: {
					...formState.values,
					['asset_details_' + id]: desc
				},
				touched: {
					...formState.touched,
					['asset_details_' + id]: true
				}
			}));

			setPoDetails(poDetails => ({
				...poDetails,
				[id]: {
					...poDetails[id],
					description: desc
				}
			}));
		}
	};

	const handleSubmit = async event => {
		event.preventDefault();
		if (formState.isValid) {
			let form_data = formState.values;
			form_data['poDetails'] = Object.values(poDetails);
			dispatch(addPurchaseOrders(form_data));
		}
	};

	const hasError = field =>
		formState.touched[field] && formState.errors[field] ? true : false;

	return (
		<Page className={classes.root} title="Add Purchase Order">
			<Header />
			<Card className={classes.projectDetails}>
				<CardHeader title="Add Purchase Order" />
				<CardContent>
					<form onSubmit={handleSubmit}>
						<div className={classes.formGroup}>
							<Grid container spacing={3}>
								<Grid item xs={6} sm={4}>
									<TextField
										error={hasError('purchase_order_number')}
										fullWidth
										helperText={
											hasError('purchase_order_number')
												? formState.errors.purchase_order_number[0]
												: null
										}
										label="P.O Number"
										name="purchase_order_number"
										onChange={handleChange}
										value={formState.values.purchase_order_number || ''}
										variant="outlined"
										size="small"
									/>
								</Grid>
								<Grid item xs={6} sm={4}>
									<TextField
										className={classes.field}
										value={formState.values.date || ''}
										fullWidth
										label="P.O Date"
										name="date"
										onChange={handleChange}
										type="date"
										variant="outlined"
										size="small"
										InputLabelProps={{
											shrink: true
										}}
										error={hasError('date')}
										helperText={
											hasError('date') ? formState.errors.date[0] : null
										}
									/>
								</Grid>
								<Grid item xs={6} sm={4}>
									<TextField
										className={classes.field}
										value={formState.values.estimated_delivery_date || ''}
										fullWidth
										label="Estimated Delivery Date"
										name="estimated_delivery_date"
										onChange={handleChange}
										type="date"
										variant="outlined"
										size="small"
										InputLabelProps={{
											shrink: true
										}}
										error={hasError('estimated_delivery_date')}
										helperText={
											hasError('estimated_delivery_date')
												? formState.errors.estimated_delivery_date[0]
												: null
										}
									/>
								</Grid>
							</Grid>
							<Grid container spacing={3}>
								<Grid item xs={6} sm={4}>
									<TextField
										className={classes.field}
										value={formState.values.actual_delivery_date || ''}
										fullWidth
										label="Actual Delivery Date"
										name="actual_delivery_date"
										onChange={handleChange}
										type="date"
										variant="outlined"
										size="small"
										InputLabelProps={{
											shrink: true
										}}
										error={hasError('actual_delivery_date')}
										helperText={
											hasError('actual_delivery_date')
												? formState.errors.actual_delivery_date[0]
												: null
										}
									/>
								</Grid>
								<Grid item xs={6} sm={4}>
									{vendorsState.vendorsDropdownList ? (
										<Autocomplete
											id="vendor_id"
											value={vendor}
											onChange={(event, newValue) => {
												if (newValue) {
													setVendor(newValue);
													setVendorId(newValue.id);
												} else {
													setVendor(newValue);
													setVendorId('');
												}
											}}
											size="small"
											options={vendorsState.vendorsDropdownList}
											getOptionLabel={option => option.name}
											renderInput={params => (
												<TextField
													{...params}
													label="Select Vendor"
													variant="outlined"
													error={hasError('vendor_id')}
													helperText={
														hasError('vendor_id')
															? formState.errors.vendor_id[0]
															: null
													}
												/>
											)}
										/>
									) : (
										''
									)}
								</Grid>
								<Grid item xs={6} sm={4}>
									<OfficesDropdown
										OfficeValue={OfficeValue}
										setOfficeValue={setOfficeValue}
										selectedId={session.user.employee.office_id}
										id="office_id"
										name="office_id"
										officeOnChange={officeOnChange}
										disabled={true}
										renderInput={params => (
											<TextField
												{...params}
												label="Select Office"
												variant="outlined"
												error={hasError('office_id')}
												helperText={
													hasError('office_id')
														? formState.errors.office_id[0]
														: null
												}
											/>
										)}
									/>
								</Grid>
								<Grid item xs={6} sm={4}>
									<TextField
										className={classes.field}
										value={formState.values.exchange_rate || ''}
										fullWidth
										label="Exchange Rate"
										name="exchange_rate"
										onChange={handleChange}
										variant="outlined"
										size="small"
										error={hasError('exchange_rate')}
										helperText={
											hasError('exchange_rate')
												? formState.errors.exchange_rate[0]
												: null
										}
									/>
								</Grid>
								<Grid item xs={6} sm={4}>
									<AddDocument />
								</Grid>
							</Grid>
							<Grid container spacing={3}>
								<Grid item xs={12} sm={12}>
									<StyledButton
										color="bsuccess"
										type="button"
										variant="contained"
										onClick={addPODetail}
										size="small"
										startIcon={<AddCircleOutlineIcon />}>
										Add P.O Details
									</StyledButton>
								</Grid>
							</Grid>
							<Grid container spacing={3}>
								<Grid item xs={12} sm={12}>
									{!isEmpty(poDetails) ? (
										<PoDetailsItem
											poDetailsList={Object.values(poDetails)}
											formState={formState}
											setFormState={setFormState}
											hasError={hasError}
											handleAssetDetailsChange={handleAssetDetailsChange}
											handleQuantityChange={handleQuantityChange}
											handleUnitPriceChange={handleUnitPriceChange}
											handleExtendedPriceChange={handleExtendedPriceChange}
											handleLocalCurrencyTotalChange={
												handleLocalCurrencyTotalChange
											}
											handleDollarTotalChange={handleDollarTotalChange}
											setPoDetails={setPoDetails}
											deletePoItem={deletePoItem}
										/>
									) : (
										''
									)}
								</Grid>
							</Grid>
							<Grid container spacing={3}>
								<Grid item xs={12} sm={12}>
									<CKEditor
										editor={ClassicEditor}
										config={CK_CONFIGS(localStorage.getItem('token'))}
										data={formState.values.description || ''}
										onChange={(event, editor) => {
											const data = editor.getData();
											setDescription(data);
										}}
									/>
									<FormControl error={hasError('description')}>
										<FormHelperText id="component-error-text">
											{hasError('description')
												? formState.errors.description[0]
												: null}
										</FormHelperText>
									</FormControl>
								</Grid>
							</Grid>
						</div>
						<StyledButton
							color="bprimary"
							disabled={!formState.isValid}
							size="small"
							type="submit"
							variant="contained"
							startIcon={<SaveIcon />}>
							Create Purchase Order
						</StyledButton>{' '}
						&nbsp; &nbsp;
						<StyledButton
							variant="contained"
							color="blight"
							size="small"
							onClick={() => {
								dispatch(redirectToPurchaseOrdersList());
							}}
							startIcon={<CancelIcon />}>
							CLOSE
						</StyledButton>
					</form>
				</CardContent>
			</Card>
		</Page>
	);
};

export default PurchaseOrdersAdd;
