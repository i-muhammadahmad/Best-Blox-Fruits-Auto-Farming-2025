import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import validate from 'validate.js';
import { makeStyles } from '@material-ui/styles';
import { Page, StyledButton } from 'components';
import {
  Header,
} from './components';
import { 
  updateActivityLog,
  hideActivityLogValidationError,
  activitySetupByRoleListFetch,
  getExtraFieldsConfigs,
  redirectToActivityLogList
} from 'actions'
import { 
  Card, 
  CardHeader, 
  CardContent,
  TextField,
  Grid,
  FormControl,
  FormHelperText,
  Paper,
 } from '@material-ui/core';
import Autocomplete from '@material-ui/lab/Autocomplete';
import CKEditor from '@ckeditor/ckeditor5-react'
import ClassicEditor from 'ckeditor5-custom-build/build/ckeditor';
import { isEmpty, find, each, some, includes } from 'lodash';
import useRouter from 'utils/useRouter';
import SaveIcon from '@material-ui/icons/Save';
import CancelIcon from '@material-ui/icons/Cancel';
import { CK_CONFIGS } from 'configs';

const schema = {
  name: {
    presence: { allowEmpty: false, message: 'is required' },
  },
  activity_units_logged: {
    presence: { allowEmpty: false, message: 'is required' },
    numericality: {
      onlyInteger: true,
    }
  },
  activity_id: {
    presence: { allowEmpty: false, message: 'is required' },
  } 
}

const useStyles = makeStyles(theme => ({
  root: {
    width: theme.breakpoints.values.lg,
    maxWidth: '100%',
    margin: '0 auto',
    padding: theme.spacing(3, 3, 6, 3)
  },
  projectDetails: {
    marginTop: theme.spacing(3)
  },
  formGroup: {
    marginBottom: theme.spacing(3)
  }
}));

const ActivityLogUpdate = () => {
  const classes = useStyles();
  const dispatch = useDispatch();
  const router = useRouter();
  const activityLogState = useSelector(state => state.activityLogState);
  const activitySetupState = useSelector(state => state.activitySetupState);
  const session = useSelector(state => state.session);

  const [ActivityValue, setActivityValue] = useState(null);
  const [addedExtraFeilds, setAddedExtraFeilds] = useState([]);
  const [formState, setFormState] = useState({
    isValid: false,
    values: {
      'object_viewed_id': session.current_page_permissions.object_id,
    },
    touched: {
      'object_viewed_id': true,
    },
    errors: {}
  });

  
  useEffect(() => {
    const errors = validate(formState.values, schema);

    setFormState(formState => ({
      ...formState,
      isValid: errors ? false : true,
      errors: errors || {}
    }));
  }, [formState.values]);

  useEffect(() => {
    if(!isEmpty(activityLogState.validation_error)){
      const errors = activityLogState.validation_error;
      setFormState(formState => ({
        ...formState,
        isValid: errors ? false : true,
        errors: errors || {}
      }));
    }  
  }, [activityLogState.validation_error]);

  useEffect(() => {
    if(activityLogState.redirect_to_list){
      router.history.push('/activity-log');
    } 
  }, [activityLogState.redirect_to_list, router.history]);

  useEffect(() => { 
      let record = activityLogState.activityLogRecord
      let touch = {...formState.touched};
      let vals = {...formState.values};

      each( record, ( val, key ) => { 
        if(some(['id', 'name', 'activity_id', 'activity_units_logged', 'description'], (el) => includes(key, el))){
          vals[key] = val;
          touch[key] = true;
        }
      });

      setFormState(formState => ({
        ...formState,
        values: vals,
        touched: touch
      }));
    // eslint-disable-next-line react-hooks/exhaustive-deps  
  },[])    

  useEffect(() => {
    if(!isEmpty(activitySetupState.activitySetupByRoleList) && !isEmpty(activitySetupState.availableExtraFeilds)){
      let record = activityLogState.activityLogRecord;
      const item = find(activitySetupState.activitySetupByRoleList, ['id', record.activity_id]);
      setActivityValue(item);
      mapExtraFields(item, activitySetupState.availableExtraFeilds);
    }  
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [activitySetupState.activitySetupByRoleList, activitySetupState.availableExtraFeilds])

  useEffect(()=> {
    if(!activityLogState.showUpdateForm){
      router.history.push('/activity-log');
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  },[activitySetupState.showUpdateForm]);

  
  useEffect(() => {
    dispatch(activitySetupByRoleListFetch())
    dispatch(getExtraFieldsConfigs())
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
 
  const setActivityId = activity_id => {
    setFormState(formState => ({
      ...formState,
      values: {
        ...formState.values,
        'activity_id':activity_id
      },
      touched: {
        ...formState.touched,
        'activity_id': true
      }
    }));
    dispatch(hideActivityLogValidationError('activity_id'))
  }

  const setDescription = description => {
    setFormState(formState => ({
      ...formState,
      values: {
        ...formState.values,
        'description':description
      },
      touched: {
        ...formState.touched,
        'description': true
      }
    }));
    dispatch(hideActivityLogValidationError('description'))
  }

  const mapExtraFields = (activityRecord, availableExtraFeilds) => {
    let record = activityLogState.activityLogRecord;
    let touch = [];
    let vals = [];
    let av_feilds = availableExtraFeilds;
    let ad_feilds = [];
    each( activityRecord, ( val, key ) => { 
      if(some(['field_'], (el) => includes(key, el))){
        if(!isEmpty(val)){
          const item = find(av_feilds, ['name', key]);
          if(!isEmpty(item)){
            item['field_label'] = val;
            ad_feilds.push(item);
          }  
          if(!isEmpty(record[key])){ 
            vals[key] = record[key];
            touch[key] = true;
          }
        }  
      }
    })
    setAddedExtraFeilds(ad_feilds)  

    setFormState(formState => ({
      ...formState,
      values: {
        ...formState.values,
        ...vals
      },
      touched: {
        ...formState.touched,
        ...touch
      }
    }));
    
  }

  const handleChange = event => {
    event.persist();

    setFormState(formState => ({
      ...formState,
      values: {
        ...formState.values,
        [event.target.name]:
          event.target.type === 'checkbox'
            ? event.target.checked
            : event.target.value
      },
      touched: {
        ...formState.touched,
        [event.target.name]: true
      }
    }));
    dispatch(hideActivityLogValidationError(event.target.name))
  }

  const handleSubmit = async event => {
    event.preventDefault();
    dispatch(updateActivityLog(formState.values));
  }

  const hasError = field =>
    formState.touched[field] && formState.errors[field] ? true : false;

    
  return (
    <Page
      className={classes.root}
      title="Update Activity Log"
    >
      <Header />
      <Card
        className={classes.projectDetails}
      >
        <CardHeader title="Update Activity Log" />
        <CardContent>
        <form
          onSubmit={handleSubmit}
        >
          <div className={classes.formGroup}>
            <Grid container spacing={3}>
            <Grid item xs={6} sm={3}>

            {(activitySetupState.activitySetupByRoleList)?
              <>
                <Autocomplete
                  id="activity_id"
                  value={ActivityValue}
                  onChange={(event, newValue) => {
                    if(newValue){
                      setActivityValue(newValue)
                      setActivityId(newValue.id)
                      mapExtraFields(newValue, activitySetupState.availableExtraFeilds);
                    }
                    else{
                      setActivityValue(newValue)
                      setActivityId('')
                    }
                  }}
                  options={activitySetupState.activitySetupByRoleList}
                  getOptionLabel={(option) => option.name}
                  renderInput={(params) => <TextField {...params} size="small" label="Select Activity" variant="outlined" error={hasError('activity_id')} helperText={hasError('activity_id') ? formState.errors.activity_id[0] : null} />}
                />
                {!isEmpty(ActivityValue) ?
                <FormControl >
                  <FormHelperText id="component-error-text">Unit Time:{'[' + ActivityValue.unit_processing_time + ' sec => ' + (ActivityValue.unit_processing_time / 60).toFixed(2) + ' min]'}</FormHelperText>
                </FormControl>
                : ''}
              </>  
            :''}
            
            </Grid>
            <Grid item xs={6} sm={3}>
              <TextField
                error={hasError('name')}
                fullWidth
                helperText={hasError('name') ? formState.errors.name[0] : null}
                label="Activity Log Name"
                name="name"
                onChange={handleChange}
                value={formState.values.name || ''}
                variant="outlined"
                size="small"
              />
            </Grid> 
            <Grid item xs={6} sm={3}>
              <TextField
                error={hasError('activity_units_logged')}
                fullWidth
                helperText={hasError('activity_units_logged') ? formState.errors.activity_units_logged[0] : null}
                label="Unit Processed"
                name="activity_units_logged"
                onChange={handleChange}
                value={formState.values.activity_units_logged || ''}
                variant="outlined"
                InputProps={{ inputProps: { min: 0 } }}
                type="number"
                size="small"
              />
            </Grid>
             
            </Grid>
            
              { 
                !isEmpty(addedExtraFeilds)?
                <Paper elevation={3} variant="outlined" style={{'marginTtop':'10px','padding':'10px'}} >
                  <p style={{'marginTop':'10px','marginBottom':'10px'}}><b> Extra Feilds </b></p>
                  <Grid container spacing={3}>
                    {addedExtraFeilds.map(afeild => (
                      <Grid key={afeild.name} item xs={6} sm={3} >
                        <TextField
                          fullWidth
                          label={afeild.field_label}
                          name={afeild.name}
                          onChange={handleChange}
                          value={formState.values[afeild.name] || ''}
                          variant="outlined"
                          type={afeild.type}
                          size="small"
                        />
                      </Grid>
                    ))}
                  </Grid>
                </Paper>
                :
                ''
              }
              
            
          </div>
          
          <div className={classes.formGroup}>
            <CKEditor
              editor={ ClassicEditor }
              config={CK_CONFIGS(localStorage.getItem("token"))}
              data={activityLogState.activityLogRecord.description || ''}
              onChange={ ( event, editor ) => {
                  const data = editor.getData();
                  setDescription(data)
              }}
            />
            <FormControl error={hasError('description')} >  
              <FormHelperText id="component-error-text">{hasError('description') ? formState.errors.description[0] : null}</FormHelperText>
            </FormControl> 
          </div>
          <StyledButton
            color="bprimary"
            disabled={!formState.isValid}
            size="small"
            type="submit"
            variant="contained"
            startIcon={<SaveIcon/>}
          >
            Update Activity Log
          </StyledButton> &nbsp; &nbsp;
          <StyledButton
            variant="contained"
            color="blight"
            size="small"
            onClick={ ()=>{ dispatch(redirectToActivityLogList()) } }
            startIcon={<CancelIcon />}
          >
            CLOSE
          </StyledButton>
          
        </form>
        </CardContent>
      </Card>
      
    </Page>
  );
};

export default ActivityLogUpdate;
