import axios from 'axios';
import { API_URL } from 'configs'

export const COMPANY_CONTACT_REQUEST = 'COMPANY_CONTACT_REQUEST'
export const COMPANY_CONTACT_SUCCESS = 'COMPANY_CONTACT_SUCCESS'
export const COMPANY_CONTACT_VALIDATION_ERROR = 'COMPANY_CONTACT_VALIDATION_ERROR'
export const SHOW_SNACKBAR = 'SHOW_SNACKBAR';
export const HIDE_COMPANY_CONTACT_FEILD_VALIDATION_ERROR = "HIDE_COMPANY_CONTACT_FEILD_VALIDATION_ERROR"
export const REDIRECT_TO_COMPANY_CONTACT_LIST = 'REDIRECT_TO_COMPANY_CONTACT_LIST'
export const COMPANY_CONTACT_GET_SUCCESS = 'COMPANY_CONTACT_GET_SUCCESS'
export const COMPANY_CONTACT_SERVER_SUCCESS = 'COMPANY_CONTACT_SERVER_SUCCESS'
const SHOW_LOADER = 'SHOW_LOADER';
const HIDE_LOADER = 'HIDE_LOADER';

const showCommonLoader = (label = '') => ({
  type: SHOW_LOADER,
  common_loder_label: label
})
const hideCommonLoader = () => ({
  type: HIDE_LOADER,
})

const companyContactRequest = () => ({
  type: COMPANY_CONTACT_REQUEST,
})

export const companyContactServerListSuccess = () => ({
  type: COMPANY_CONTACT_SERVER_SUCCESS,
})

const companyContactListSuccess = companyContactList => ({
  type: COMPANY_CONTACT_SUCCESS,
  companyContactList: companyContactList,
})

const companyContactFailure = notification => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: notification,
  snackbar_notification_type: 'general_error'
})
const validationError = notification => ({
  type: COMPANY_CONTACT_VALIDATION_ERROR,
  validation_error: notification,
})
const tokenError = notification => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: notification,
  snackbar_notification_type: 'token_expire'
})

const companyContactAddUpadteSuccess = (message, action, dispatch) => {
  dispatch(companyContactSuccessNotification(message))
  dispatch(redirectToCompanyContactList())
}

export const redirectToCompanyContactList = () => ({
  type: REDIRECT_TO_COMPANY_CONTACT_LIST,
})

const getCompanyContactSuccess = (response, action) => ({
  type: COMPANY_CONTACT_GET_SUCCESS,
  record: response,
  actionType: action
})

const companyContactSuccessNotification = message => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: message,
  snackbar_notification_type: 'success'
})


export const hideCompanyContactValidationError = (feild_key) => ({
  type: HIDE_COMPANY_CONTACT_FEILD_VALIDATION_ERROR,
  feild_key: feild_key
})

export const companyContactListFetch = () => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(companyContactRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "company_contact/getAll", {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        dispatch(companyContactListSuccess(response.data))
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });

  }
}

export const addCompanyContact = (data) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(companyContactRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "company_contact/create", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: data,
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        companyContactAddUpadteSuccess('Company Contact Added Successfully', 'create', dispatch)
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });

  }
}

export const updateCompanyContact = (data) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(companyContactRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "company_contact/update/" + data.id, {
      method: "PUT",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer  ' + token
      },
      data: data
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        companyContactAddUpadteSuccess('Company Contact Updated Successfully', 'update', dispatch)
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });

  }
}

export const getCompanyContactById = (id, action) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(companyContactRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "company_contact/getById/" + id, {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer  ' + token
      },
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        dispatch(getCompanyContactSuccess(response.data, action))
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });

  }
}

export const deleteCompanyContact = (companyContactId, object_viewed_id) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(companyContactRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "company_contact/delete/" + companyContactId, {
      method: "DELETE",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: {
        object_viewed_id
      }
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        dispatch(companyContactSuccessNotification('Company Contact deleted successfully'))
        dispatch(companyContactListFetch())
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });
  }

}

// handling error reponse   
const handleErrorResponse = (error, dispatch) => {
  try {
    if (error.response.status === 422 && error.response.data.error) {
      dispatch(validationError(error.response.data.error))
    }
    else if (error.response.status === 401 && error.response.data.error) {
      dispatch(tokenError(error.response.data.error.toString()))
    }
    else {
      let err = '';
      if (error.response.data.error) {
        err = error.response.data.error.toString()
      }
      else {
        err = error.response.status + ` ` + error.response.statusText
      }
      dispatch(companyContactFailure(err))
    }
  }
  catch (e) {
    dispatch(companyContactFailure('Unable to perform action.Something went wrong'))
  }
}   