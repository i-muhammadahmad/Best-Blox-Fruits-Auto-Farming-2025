import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import PerfectScrollbar from 'react-perfect-scrollbar';
import { makeStyles } from '@material-ui/styles';
import { StyledButton } from 'components';
import {
  GridList,
  GridListTile,
  GridListTileBar,
  ListSubheader,
  IconButton,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
} from '@material-ui/core';
import { split, findLast, isEmpty } from 'lodash';
import { FileIcon, defaultStyles } from "react-file-icon";
import { API_URL } from 'configs';
import GetAppOutlinedIcon from '@material-ui/icons/GetAppOutlined';
import DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';
import DeleteIcon from '@material-ui/icons/Delete';

const useStyles = makeStyles((theme) => ({
  root: {
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'left',
    overflow: 'hidden',
    backgroundColor: theme.palette.background.paper,
  },
  imageList: {
    width: '100%',
    /*height: 450,*/
  },
  iconDel: {
    color: 'rgb(220, 53, 69)',
    padding: 'unset'
  },
  iconDownload: {
    //background: theme.palette.bprimary.main,
    color: theme.palette.bprimary.contrastText,
    padding: 'unset',
    borderRadius: 'unset'
  },
  svgIcon:{
    height: '100%',
    "& svg": {
      height: '72%',
    }
  },
  gridListTitle: {
    fontSize: '13px'
  }
}));

const AttachmentsPreviewer = props => {
  const { 
    className,  
    attachmentList, 
    setAttachmentList, 
    showDeleteButton, 
    showDownloadButton, 
    deleteCallback,
    downloadCallback,
    tempDeletedList,
    colHeight,
    noOfCols,
    ...rest 
  } = props;

  const classes = useStyles();
  const dispatch = useDispatch();
  const [openDeleteModel, setOpenDeleteModel] = useState(false);
  const [attachmentId, setAttachmentId] = useState('');

  //discard model actions
  const showDeleteModel = (e, id) => {
    setOpenDeleteModel(true);
    setAttachmentId(id);
  }

  const hideDeleteModel = () => {
    setOpenDeleteModel(false);
    setAttachmentId('');
  }

  const deleteAttachment = async (e) => {
    await deleteCallback(e, attachmentId);
    hideDeleteModel();
  }

  const getFileIcon = (file) => {

    let ext = (file.file_name).split(".")[1];
    return(
      <div className={classes.svgIcon}>
        <FileIcon extension={ext} {...defaultStyles[ext]} />
      </div>
    );
  }
  
  return (
    <div
      {...rest}
      className={clsx(classes.root, className)}
    >
      <GridList cellHeight={colHeight} cols={noOfCols} className={classes.imageList}>
        {attachmentList.map((item) => {
          if(isEmpty(findLast(tempDeletedList, (o) => { return o === item.id; }))){
            return(
              <GridListTile key={item.id}>
                {(item.is_image)?
                  <img src={API_URL+item.file_path} alt={item.file_name} />
                  :
                  getFileIcon(item)
                }
                <GridListTileBar
                  title={item.file_name}
                  classes={{
                    title: classes.gridListTitle
                  }}
                  actionIcon={
                    <>
                      {(showDownloadButton)?
                      <IconButton aria-label={`info about ${item.file_name}`} className={classes.iconDownload} onClick={(e)=>downloadCallback(e, item.id)}>
                        <GetAppOutlinedIcon />
                      </IconButton>
                      :''}
                      {(showDeleteButton)?
                      <IconButton aria-label={`info about ${item.file_name}`} className={classes.iconDel} onClick={(e)=>showDeleteModel(e, item.id)}>
                        <DeleteOutlineIcon />
                      </IconButton>
                      :''}
                    </>
                  }
                />
              </GridListTile>
            )
          }  
        })}
      </GridList>

      <Dialog
        open={openDeleteModel}
        onClose={hideDeleteModel}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
        <DialogTitle id="alert-dialog-title">Delete Attachments</DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">
            Are you sure you want to delete this attachment? 
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <StyledButton onClick={hideDeleteModel}   >
            Cancel
          </StyledButton>
          <StyledButton
            variant="contained"
            color="bdanger"
            startIcon={<DeleteIcon />}
            onClick={(e)=>deleteAttachment(e)}
            autoFocus={true}
          >
            Delete Attachment
          </StyledButton>
        </DialogActions>
      </Dialog>

    </div>
  );
};

AttachmentsPreviewer.propTypes = {
  className: PropTypes.string,
  attachmentList: PropTypes.any.isRequired,
  setAttachmentList: PropTypes.any.isRequired
};

AttachmentsPreviewer.defaultProps = {
  attachmentList: [],
  tempDeletedList: [],
  showDeleteButton: true, 
  showDownloadButton: true,
  downloadCallback: (e, record_id)=>{/*nothing to do*/},
  deleteCallback:(e, record_id)=>{/*nothing to do*/},
  colHeight: 180,
  noOfCols: 5,
};

export default AttachmentsPreviewer;
