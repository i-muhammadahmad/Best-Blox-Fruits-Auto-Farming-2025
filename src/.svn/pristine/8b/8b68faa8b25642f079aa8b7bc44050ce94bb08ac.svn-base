import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { makeStyles } from '@material-ui/styles';
import {
  TextField,
  Grid,
  FormControl,
  FormHelperText,
  Typography,
  Checkbox,
  FormControlLabel,
  FormLabel,
  FormGroup
} from '@material-ui/core';
import {
  hideAssetTypesValidationError,
  setQuizAddUpdateStatusFalse
} from 'actions';
import CKEditor from '@ckeditor/ckeditor5-react';
import ClassicEditor from 'ckeditor5-custom-build/build/ckeditor';
import { CK_CONFIGS } from 'configs';
import SlideMedia from '../AssetTypeMedia';
import { remove } from 'lodash';

const useStyles = makeStyles((theme) => ({
  root: {},
  projectDetails: {
    marginTop: theme.spacing(3)
  },
  formGroup: {
    marginBottom: theme.spacing(3)
  }
}));

const AssetTypesForm = props => {
  const { formState, setFormState, files, setFiles, ...rest } = props;

  const classes = useStyles();
  const dispatch = useDispatch();

  const [dropZoneConfig, setDropZoneConfig] = useState({
    accept: 'image/*',
    maxFiles: 1,
    maxSize: 1000000,
  });

  const assetTypesState = useSelector(state => state.assetTypesState);
  const session = useSelector(state => state.session);

  useEffect(() => {
    dispatch(setQuizAddUpdateStatusFalse())
  }, []);

  const setDescription = description => {
    setFormState(formState => ({
      ...formState,
      values: {
        ...formState.values,
        'description': description
      },
      touched: {
        ...formState.touched,
        'description': true
      }
    }));
    dispatch(hideAssetTypesValidationError('description'))
  }

  const handleBinderWithChange = event => {
    let bindings = formState.values.binder_with;
    if(event.target.checked){
      bindings.push(event.target.name);
    }
    else{
      bindings.pop(event.target.name);
      remove(bindings, [event.target.name]);
    }
    setFormState(formState => ({
      ...formState,
      values: {
        ...formState.values,
        ['binder_with']: bindings
      },
      touched: {
        ...formState.touched,
        ['binder_with']: true
      }
    }));
    handleChange(event);
  }

  const handleChange = event => {
    event.persist();
    setFormState(formState => ({
      ...formState,
      values: {
        ...formState.values,
        [event.target.name]:
          event.target.type === 'checkbox'
            ? event.target.checked
            : event.target.value
      },
      touched: {
        ...formState.touched,
        [event.target.name]: true
      }
    }));
    dispatch(hideAssetTypesValidationError(event.target.name))
  }

  const hasError = field =>
    formState.touched[field] && formState.errors[field] ? true : false;

  return (
    <form>
      <div className={classes.formGroup}>
        <Grid container spacing={3}>
          <Grid item xs={12} sm={8}>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <TextField
                  error={hasError('name')}
                  fullWidth
                  helperText={hasError('name') ? formState.errors.name[0] : null}
                  label="Name"
                  name="name"
                  onChange={handleChange}
                  value={formState.values.name || ''}
                  variant="outlined"
                  size="small"
                />
              </Grid>
            </Grid> <br />
            <Grid container spacing={3}>  
              <Grid item xs={12} sm={12}>
                <FormControl component="fieldset" className={classes.formControl} error={hasError('binder_with')}>
                  <FormLabel component="legend">Asset is Bound With?</FormLabel>
                  <FormGroup row>
                    <FormControlLabel
                      control={<Checkbox checked={formState.values.is_binded_with_employee} onChange={handleBinderWithChange} name="is_binded_with_employee" />}
                      label="Employee"
                    />
                    <FormControlLabel
                      control={<Checkbox checked={formState.values.is_binded_with_workstation} onChange={handleBinderWithChange} name="is_binded_with_workstation" />}
                      label="Workstation"
                    />
                    <FormControlLabel
                      control={<Checkbox disabled={true} checked={formState.values.is_binded_with_office} onChange={handleBinderWithChange} name="is_binded_with_office" />}
                      label="Office"
                    />
                  </FormGroup>
                  <FormHelperText component="div" id="bound-error-text">{hasError('binder_with') ? formState.errors.binder_with[0] : null}</FormHelperText>
                </FormControl>
              </Grid>
            </Grid>  
            <Grid container spacing={3}>
              <Grid item xs={12} sm={12}>
                <div className={classes.formGroup}>
                  <CKEditor
                    editor={ClassicEditor}
                    data={formState.values.description || ''}
                    config={CK_CONFIGS(localStorage.getItem("token"))}
                    onChange={(event, editor) => {
                      const data = editor.getData();
                      setDescription(data)
                    }}
                  />
                  <FormControl error={hasError('description')} >
                    <FormHelperText component='div' id="component-error-text">{hasError('description') ? formState.errors.description[0] : null}</FormHelperText>
                  </FormControl>
                </div>
              </Grid>  
            </Grid>   
          </Grid>  
          <Grid item xs={12} sm={4}>
            <SlideMedia
              files={files}
              setFiles={setFiles}
              dropZoneConfig={dropZoneConfig}
              formState={formState}
            />
          </Grid>
        </Grid>
      </div>
      
    </form>
  );
};

export default AssetTypesForm;
