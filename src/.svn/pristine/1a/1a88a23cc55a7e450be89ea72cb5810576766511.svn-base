import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import useRouter from 'utils/useRouter';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { makeStyles } from '@material-ui/styles';
import {
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Typography,
  Grid,
} from '@material-ui/core'
import { StyledButton } from 'components';
import CancelIcon from '@material-ui/icons/Cancel';
import {
  redirectToQuizSetupList,
  publishQuizSetup
} from 'actions';
import PublishIcon from '@material-ui/icons/Publish';
import { isEmpty } from 'lodash';

const useStyles = makeStyles(() => ({
  root: {}
}));

const Header = props => {
  const { className, ...rest } = props;
  const dispatch = useDispatch();
  const classes = useStyles();
  const router = useRouter();

  const [openPublishModel, setOpenPublishModel] = React.useState(false);
  const [disablePublishButton, setDisablePublishButton] = React.useState(true);
  const quizSetupState = useSelector(state => state.quizSetupState);
  const session = useSelector(state => state.session);

  useEffect(() => {
    if (!isEmpty(quizSetupState.quiz_id) && !isEmpty(quizSetupState.quizSlidesList)) {
      setDisablePublishButton(false);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [quizSetupState.quiz_id, quizSetupState.quizSlidesList]);

  useEffect(() => {
    if (quizSetupState.showUpdateForm) {
      router.history.push('/quiz-setup/update');
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [quizSetupState.showUpdateForm]);

  const showPublishModel = () => {
    setOpenPublishModel(true)
  }

  const hidePublishModel = () => {
    setOpenPublishModel(false)
  }

  const publishQuiz = () => {
    dispatch(publishQuizSetup(quizSetupState.quiz_id, session.current_page_permissions.object_id))
    setOpenPublishModel(false)
  }

  return (
    <div
      {...rest}
      className={clsx(classes.root, className)}
    >
      <Grid
        alignItems="flex-end"
        container
        justify="space-between"
        spacing={3}
      >
        <Grid item>
          <Typography
            component="h2"
            gutterBottom
            variant="overline"
          >
            Quiz Management
          </Typography>
          <Typography
            component="h1"
            variant="h3"
          >
            Quiz Setup
          </Typography>
        </Grid>
        <Grid item>
          {(quizSetupState.quizSetupRecord.is_published !== 'y') ?
            <><StyledButton
              variant="contained"
              color="bsuccess"
              size="small"
              onClick={() => showPublishModel()}
              startIcon={<PublishIcon />}
              disabled={disablePublishButton}
            >
              Publish
            </StyledButton>&nbsp;&nbsp;</>
            : ''}
          <StyledButton
            variant="contained"
            color="blight"
            size="small"
            onClick={() => { dispatch(redirectToQuizSetupList()) }}
            startIcon={<CancelIcon />}
          >
            CLOSE
          </StyledButton>
        </Grid>
      </Grid>
      <Dialog
        open={openPublishModel}
        onClose={hidePublishModel}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
        <DialogTitle id="alert-dialog-title">Publish Quiz</DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">
            Are you sure you want to publish this quiz? <br />
            You will not be able to edit a published quiz.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <StyledButton onClick={hidePublishModel}   >
            Cancel
          </StyledButton>
          <StyledButton
            variant="contained"
            color="bsuccess"
            startIcon={<PublishIcon />}
            onClick={publishQuiz}
            autoFocus={true}
          >
            Publish
          </StyledButton>
        </DialogActions>
      </Dialog>
    </div>
  );
};

Header.propTypes = {
  className: PropTypes.string
};

export default Header;
