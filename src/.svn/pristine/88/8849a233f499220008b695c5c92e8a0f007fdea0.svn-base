import axios from 'axios';
import { API_URL } from 'configs'

export const EMPLOYEES_REQUEST = 'EMPLOYEES_REQUEST'
export const EMPLOYEES_SUCCESS = 'EMPLOYEES_SUCCESS'
export const EMPLOYEES_VALIDATION_ERROR = 'EMPLOYEES_VALIDATION_ERROR'
export const SHOW_SNACKBAR = 'SHOW_SNACKBAR';
export const HIDE_EMPLOYEES_FEILD_VALIDATION_ERROR = "HIDE_EMPLOYEES_FEILD_VALIDATION_ERROR"
export const REDIRECT_TO_EMPLOYEES_LIST = 'REDIRECT_TO_EMPLOYEES_LIST'
export const EMPLOYEES_GET_SUCCESS = 'EMPLOYEES_GET_SUCCESS'
export const EMPLOYEES_DROPDOWN_LIST_SUCCESS = 'EMPLOYEES_DROPDOWN_LIST_SUCCESS'
export const EMPLOYEES_SERVER_SUCCESS = "EMPLOYEES_SERVER_SUCCESS"
export const GET_EMPLOYEES_SHIFT_SUCCESS = 'GET_EMPLOYEES_SHIFT_SUCCESS'
export const GET_EMPLOYEES_HOLIDAY_SUCCESS = 'GET_EMPLOYEES_HOLIDAY_SUCCESS'
export const EMPLOYEES_CUSTOM_DROPDOWN_LIST_SUCCESS = 'EMPLOYEES_CUSTOM_DROPDOWN_LIST_SUCCESS'
export const EMPLOYEES_ASSETS_LIST_SUCCESS = 'EMPLOYEES_ASSETS_LIST_SUCCESS'
const SHOW_LOADER = 'SHOW_LOADER';
const HIDE_LOADER = 'HIDE_LOADER';

const showCommonLoader = (label = '') => ({
  type: SHOW_LOADER,
  common_loder_label: label
})
const hideCommonLoader = () => ({
  type: HIDE_LOADER,
})

const employeesRequest = () => ({
  type: EMPLOYEES_REQUEST,
})

export const employeesListServerSuccess = () => ({
  type: EMPLOYEES_SERVER_SUCCESS,
})

const employeesListSuccess = employeesList => ({
  type: EMPLOYEES_SUCCESS,
  employeesList: employeesList,
})

const employeesFailure = notification => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: notification,
  snackbar_notification_type: 'general_error'
})
const validationError = notification => ({
  type: EMPLOYEES_VALIDATION_ERROR,
  validation_error: notification,
})
const tokenError = notification => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: notification,
  snackbar_notification_type: 'token_expire'
})

const employeesAddUpadteSuccess = (message, action, dispatch) => {
  dispatch(employeesSuccessNotification(message))
  dispatch(redirectToEmployeesList())
}

export const redirectToEmployeesList = () => ({
  type: REDIRECT_TO_EMPLOYEES_LIST,
})

const getEmployeesSuccess = (response, action) => ({
  type: EMPLOYEES_GET_SUCCESS,
  record: response,
  actionType: action
})

const employeesSuccessNotification = message => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: message,
  snackbar_notification_type: 'success'
})


export const hideEmployeesValidationError = (feild_key) => ({
  type: HIDE_EMPLOYEES_FEILD_VALIDATION_ERROR,
  feild_key: feild_key
})

/*
* employees dropdown list fetch methods
*/
const employeesCustomDropdownListSuccess = approvalProfileEmployeeList => ({
  type: EMPLOYEES_CUSTOM_DROPDOWN_LIST_SUCCESS,
  approvalProfileEmployeeList: approvalProfileEmployeeList,
});

export const employeesCustomDropdownListFetch = (offices_ids, client_ids) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(employeesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "employees/getAllForCustomDropdown", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: {
        offices_ids: offices_ids,
        client_ids: client_ids
      }
    })
      .then((response) => {
        dispatch(employeesCustomDropdownListSuccess(response.data))
        dispatch(hideCommonLoader())
      }, (error) => {
        handleErrorResponse(error, dispatch)
        dispatch(hideCommonLoader())
      });

  }
}

const employeesDropdownListSuccess = employeesDropdownList => ({
  type: EMPLOYEES_DROPDOWN_LIST_SUCCESS,
  employeesDropdownList: employeesDropdownList,
});

export const employeesDropdownListFetch = (offices_ids, client_ids) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(employeesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "employees/getAllForDropdown", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: {
        offices_ids: offices_ids,
        client_ids: client_ids
      }
    })
      .then((response) => {
        dispatch(employeesDropdownListSuccess(response.data))
        dispatch(hideCommonLoader())
      }, (error) => {
        handleErrorResponse(error, dispatch)
        dispatch(hideCommonLoader())
      });

  }
}

export const employeesListFetch = () => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(employeesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "employees/getAll", {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
    })
      .then((response) => {
        dispatch(employeesListSuccess(response.data))
        dispatch(hideCommonLoader())
      }, (error) => {
        handleErrorResponse(error, dispatch)
        dispatch(hideCommonLoader())
      });

  }
}

export const addEmployees = (data) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(employeesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "employees/create", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: data,
    })
      .then((response) => {
        employeesAddUpadteSuccess('Employee Added Successfully', 'create', dispatch)
        dispatch(hideCommonLoader())
      }, (error) => {
        handleErrorResponse(error, dispatch)
        dispatch(hideCommonLoader())
      });

  }
}

export const updateEmployees = (data) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(employeesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "employees/update/" + data.get('id'), {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer  ' + token
      },
      data: data
    })
      .then((response) => {
        employeesAddUpadteSuccess('Employee Updated Successfully', 'update', dispatch)
        dispatch(hideCommonLoader())
      }, (error) => {
        handleErrorResponse(error, dispatch)
        dispatch(hideCommonLoader())
      });

  }
}

export const getEmployeesById = (id, action) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(employeesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "employees/getById/" + id, {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer  ' + token
      },
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        dispatch(getEmployeesSuccess(response.data, action))
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });

  }
}

export const deleteEmployees = (employeesId, object_viewed_id) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(employeesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "employees/delete/" + employeesId, {
      method: "DELETE",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: {
        object_viewed_id
      }
    })
      .then((response) => {
        dispatch(employeesSuccessNotification('Employee deleted successfully'))
        dispatch(hideCommonLoader())
        dispatch(employeesListFetch())
      }, (error) => {
        handleErrorResponse(error, dispatch)
        dispatch(hideCommonLoader())
      });
  }

}

const getEmployeeShiftSuccess = (employeeLatestShift) => ({
  type: GET_EMPLOYEES_SHIFT_SUCCESS,
  employeeLatestShift: employeeLatestShift,
})

export const getEmployeesLatestShift = (employee_id) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(employeesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "employees/getLatestShift", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer  ' + token
      },
      data:{
        'employee_id': employee_id
      }
    })
    .then((response) => {
      dispatch(hideCommonLoader())
      dispatch(getEmployeeShiftSuccess(response.data))
    }, (error) => {
      dispatch(hideCommonLoader())
      handleErrorResponse(error, dispatch)
    });

  }
}

//
export const getEmployeeAllAssets = (employee_id) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(employeesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "assets/getByAttributes", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data:{
        allocated_employee: employee_id
      }
    })
      .then((response) => {
        dispatch(employeesAssetsListSuccess(response.data))
        dispatch(hideCommonLoader())
      }, (error) => {
        handleErrorResponse(error, dispatch)
        dispatch(hideCommonLoader())
      });

  }
}

const employeesAssetsListSuccess = employeeAssetsList => ({
  type: EMPLOYEES_ASSETS_LIST_SUCCESS,
  employeeAssetsList: employeeAssetsList,
})

const getEmployeeHolidaysSuccess = (employeeHolidays) => ({
  type: GET_EMPLOYEES_HOLIDAY_SUCCESS,
  employeeHolidays: employeeHolidays,
})

export const getEmployeeHolidays = (employee_id, client_id, start_date, end_date) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(employeesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "employees/getEmpHolidays", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer  ' + token
      },
      data:{
        'employee_id': employee_id,
        'client_id': client_id,
        'start_date': start_date,
        'end_date': end_date
      }
    })
    .then(async (response) => {
      dispatch(hideCommonLoader())
      dispatch(getEmployeeHolidaysSuccess(response.data))
    }, (error) => {
      dispatch(hideCommonLoader())
      handleErrorResponse(error, dispatch)
    });

  }
}

// handling error reponse   
const handleErrorResponse = (error, dispatch) => {
  try {
    if (error.response.status === 422 && error.response.data.error) {
      dispatch(validationError(error.response.data.error))
    }
    else if (error.response.status === 401 && error.response.data.error) {
      dispatch(tokenError(error.response.data.error.toString()))
    }
    else {
      let err = '';
      if (error.response.data.error) {
        err = error.response.data.error.toString()
      }
      else {
        err = error.response.status + ` ` + error.response.statusText
      }
      dispatch(employeesFailure(err))
    }
  }
  catch (e) {
    dispatch(employeesFailure('Unable to perform action.Something went wrong'))
  }
}   