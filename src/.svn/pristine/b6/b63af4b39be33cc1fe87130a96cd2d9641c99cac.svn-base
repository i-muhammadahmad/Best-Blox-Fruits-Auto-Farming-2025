import axios from 'axios';
import { API_URL } from 'configs'

export const OBJECTS_REQUEST = 'OBJECTS_REQUEST'
export const OBJECTS_SUCCESS = 'OBJECTS_SUCCESS'
export const OBJECTS_VALIDATION_ERROR = 'OBJECTS_VALIDATION_ERROR'
export const SHOW_SNACKBAR = 'SHOW_SNACKBAR';
export const HIDE_OBJECTS_FEILD_VALIDATION_ERROR = "HIDE_OBJECTS_FEILD_VALIDATION_ERROR"
export const REDIRECT_TO_OBJECTS_LIST = 'REDIRECT_TO_OBJECTS_LIST'
export const OBJECTS_GET_SUCCESS = 'OBJECTS_GET_SUCCESS'
export const OBJECTS_PARENT_SUCCESS = 'OBJECTS_PARENT_SUCCESS'
export const OBJECTS_NESTED_TREE_SUCCESS = 'OBJECTS_NESTED_TREE_SUCCESS'
export const OBJECTS_SERVER_SUCCESS = 'OBJECTS_SERVER_SUCCESS'
const SHOW_LOADER = 'SHOW_LOADER';
const HIDE_LOADER = 'HIDE_LOADER';

const showCommonLoader = (label = '') => ({
  type: SHOW_LOADER,
  common_loder_label: label
})
const hideCommonLoader = () => ({
  type: HIDE_LOADER,
})

const objectsRequest = () => ({
  type: OBJECTS_REQUEST,
})

export const objectsServerListSuccess = () => ({
  type: OBJECTS_SERVER_SUCCESS
})

const objectsListSuccess = objectsList => ({
  type: OBJECTS_SUCCESS,
  objectsList: objectsList,
})

const objectsParentListSuccess = objectsParentsList => ({
  type: OBJECTS_PARENT_SUCCESS,
  objectsParentsList: objectsParentsList,
})

const objectsNestedTreeSuccess = objectsNestedTree => ({
  type: OBJECTS_NESTED_TREE_SUCCESS,
  objectsNestedTree: objectsNestedTree,
})

const objectsFailure = notification => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: notification,
  snackbar_notification_type: 'general_error'
})
const validationError = notification => ({
  type: OBJECTS_VALIDATION_ERROR,
  validation_error: notification,
})
const tokenError = notification => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: notification,
  snackbar_notification_type: 'token_expire'
})

const objectsAddUpadteSuccess = (message, action, dispatch) => {
  dispatch(objectsSuccessNotification(message))
  dispatch(redirectToObjectsList())
}

export const redirectToObjectsList = () => ({
  type: REDIRECT_TO_OBJECTS_LIST,
})

const getObjectsSuccess = (response, action) => ({
  type: OBJECTS_GET_SUCCESS,
  record: response,
  actionType: action
})

const objectsSuccessNotification = message => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: message,
  snackbar_notification_type: 'success'
})

export const hideObjectsValidationError = (feild_key) => ({
  type: HIDE_OBJECTS_FEILD_VALIDATION_ERROR,
  feild_key: feild_key
})

export const objectsListFetch = () => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(objectsRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "objects/getAll", {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        dispatch(objectsListSuccess(response.data))
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });

  }
}

export const objectsParentListFetch = (type_id, type_name) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(objectsRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "objects/getParentsByType", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: {
        type_id,
        type_name
      }
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        dispatch(objectsParentListSuccess(response.data))
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });
  }
}

export const objectsNestedTreeFetch = () => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(objectsRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "objects/getAllNestedObjects", {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        dispatch(objectsNestedTreeSuccess(response.data))
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });
  }
}

export const addObjects = (data) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(objectsRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "objects/create", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: data,
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        objectsAddUpadteSuccess('Object Added Successfully', 'create', dispatch)
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });

  }
}

export const updateObjects = (data) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(objectsRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "objects/update/" + data.id, {
      method: "PUT",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer  ' + token
      },
      data: data
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        objectsAddUpadteSuccess('Object Updated Successfully', 'update', dispatch)
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });

  }
}

export const getObjectsById = (id, action) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(objectsRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "objects/getById/" + id, {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer  ' + token
      },
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        dispatch(getObjectsSuccess(response.data, action))
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });

  }
}

export const deleteObjects = (objectsId, object_viewed_id) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(objectsRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "objects/delete/" + objectsId, {
      method: "DELETE",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: {
        object_viewed_id
      }
    })
      .then((response) => {
        dispatch(hideCommonLoader())
        dispatch(objectsSuccessNotification('Object deleted successfully'))
        dispatch(objectsListFetch())
      }, (error) => {
        dispatch(hideCommonLoader())
        handleErrorResponse(error, dispatch)
      });
  }

}

// handling error reponse   
const handleErrorResponse = (error, dispatch) => {
  try {
    if (error.response.status === 422 && error.response.data.error) {
      dispatch(validationError(error.response.data.error))
    }
    else if (error.response.status === 401 && error.response.data.error) {
      dispatch(tokenError(error.response.data.error.toString()))
    }
    else {
      let err = '';
      if (error.response.data.error) {
        err = error.response.data.error.toString()
      }
      else {
        err = error.response.status + ` ` + error.response.statusText
      }
      dispatch(objectsFailure(err))
    }
  }
  catch (e) {
    dispatch(objectsFailure('Unable to perform action.Something went wrong'))
  }
}   