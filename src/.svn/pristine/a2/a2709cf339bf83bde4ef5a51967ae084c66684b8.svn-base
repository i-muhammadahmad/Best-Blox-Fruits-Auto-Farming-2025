import axios from 'axios';
import { API_URL } from 'configs'

export const APPROVAL_PROFILES_REQUEST = 'APPROVAL_PROFILES_REQUEST'
export const APPROVAL_PROFILES_SUCCESS = 'APPROVAL_PROFILES_SUCCESS'
export const APPROVAL_PROFILES_VALIDATION_ERROR = 'APPROVAL_PROFILES_VALIDATION_ERROR'
export const SHOW_SNACKBAR = 'SHOW_SNACKBAR';
export const HIDE_APPROVAL_PROFILES_FEILD_VALIDATION_ERROR = "HIDE_APPROVAL_PROFILES_FEILD_VALIDATION_ERROR"
export const REDIRECT_TO_APPROVAL_PROFILES_LIST = 'REDIRECT_TO_APPROVAL_PROFILES_LIST'
export const APPROVAL_PROFILES_GET_SUCCESS = 'APPROVAL_PROFILES_GET_SUCCESS'
export const APPROVAL_PROFILES_SERVER_SUCCESS = 'APPROVAL_PROFILES_SERVER_SUCCESS'
export const APPROVAL_PROFILES_DROPDOWN_LIST_SUCCESS = 'APPROVAL_PROFILES_DROPDOWN_LIST_SUCCESS'
const SHOW_LOADER = 'SHOW_LOADER';
const HIDE_LOADER = 'HIDE_LOADER';

const showCommonLoader = (label = '') => ({
  type: SHOW_LOADER,
  common_loder_label: label
})
const hideCommonLoader = () => ({
  type: HIDE_LOADER,
})

const approvalProfilesRequest = () => ({
  type: APPROVAL_PROFILES_REQUEST,
})

export const approvalProfilesServerListSuccess = () => ({
  type: APPROVAL_PROFILES_SERVER_SUCCESS
})

const approvalProfilesListSuccess = approvalProfilesList => ({
  type: APPROVAL_PROFILES_SUCCESS,
  approvalProfilesList: approvalProfilesList,
})

const approvalProfilesDropdownListSuccess= approvalProfilesDropdownList => ({
  type: APPROVAL_PROFILES_DROPDOWN_LIST_SUCCESS,
  approvalProfilesDropdownList: approvalProfilesDropdownList,
})

const approvalProfilesFailure = notification => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: notification,
  snackbar_notification_type: 'general_error'
})
const validationError = notification => ({
  type: APPROVAL_PROFILES_VALIDATION_ERROR,
  validation_error: notification,
})
const tokenError = notification => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: notification,
  snackbar_notification_type: 'token_expire'
})

const approvalProfilesAddUpadteSuccess = (message, action, dispatch) => {
  dispatch(approvalProfilesSuccessNotification(message))
  dispatch(redirectToApprovalProfilesList())
}

export const redirectToApprovalProfilesList = () => ({
  type: REDIRECT_TO_APPROVAL_PROFILES_LIST,
})

const getApprovalProfilesSuccess = (response, action) => ({
  type: APPROVAL_PROFILES_GET_SUCCESS,
  record: response,
  actionType: action
})

const approvalProfilesSuccessNotification = message => ({
  type: SHOW_SNACKBAR,
  snackbar_notification: message,
  snackbar_notification_type: 'success'
})

export const hideApprovalProfilesValidationError = (feild_key) => ({
  type: HIDE_APPROVAL_PROFILES_FEILD_VALIDATION_ERROR,
  feild_key: feild_key
})

export const approvalProfilesListFetch = (object_viewed_id = '') => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(approvalProfilesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "approval_profiles/getAll", {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: {
        'object_viewed_id': object_viewed_id
      }
    })
    .then((response) => {
      dispatch(hideCommonLoader())
      dispatch(approvalProfilesListSuccess(response.data))
    }, (error) => {
      dispatch(hideCommonLoader())
      handleErrorResponse(error, dispatch)
    });
  }
}

export const approvalProfilesDropdownListFetch = (offices_ids, object_viewed_id = '') => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(approvalProfilesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "approval_profiles/getAllForDropdown", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: {
        'object_viewed_id': object_viewed_id,
        offices_ids: offices_ids,
      }
    })
    .then((response) => {
      dispatch(hideCommonLoader())
      dispatch(approvalProfilesDropdownListSuccess(response.data))
    }, (error) => {
      dispatch(hideCommonLoader())
      handleErrorResponse(error, dispatch)
    });
  }
}

export const addApprovalProfiles = (data) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(approvalProfilesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "approval_profiles/create", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: data,
    })
    .then((response) => {
      dispatch(hideCommonLoader())
      approvalProfilesAddUpadteSuccess('Approval Profile Added Successfully', 'create', dispatch)
    }, (error) => {
      dispatch(hideCommonLoader())
      handleErrorResponse(error, dispatch)
    });
  }
}

export const updateApprovalProfiles = (data) => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(approvalProfilesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "approval_profiles/update/" + data.id, {
      method: "PUT",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer  ' + token
      },
      data: data
    })
    .then((response) => {
      dispatch(hideCommonLoader())
      approvalProfilesAddUpadteSuccess('Approval Profile Updated Successfully', 'update', dispatch)
    }, (error) => {
      dispatch(hideCommonLoader())
      handleErrorResponse(error, dispatch)
    });
  }
}

export const getApprovalProfilesById = (id, action, object_viewed_id = '') => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(approvalProfilesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "approval_profiles/getById/" + id, {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer  ' + token
      },
      data: {
        'object_viewed_id': object_viewed_id
      }
    })
    .then((response) => {
      dispatch(hideCommonLoader())
      dispatch(getApprovalProfilesSuccess(response.data, action))
    }, (error) => {
      dispatch(hideCommonLoader())
      handleErrorResponse(error, dispatch)
    });
  }
}

export const deleteApprovalProfiles = (approvalProfilesId, object_viewed_id = '') => {
  var token = localStorage.getItem("token")
  return dispatch => {
    dispatch(approvalProfilesRequest())
    dispatch(showCommonLoader())
    return axios(API_URL + "approval_profiles/delete/" + approvalProfilesId, {
      method: "DELETE",
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'Authorization': 'Bearer ' + token
      },
      data: {
        'object_viewed_id': object_viewed_id
      }
    })
    .then((response) => {
      dispatch(hideCommonLoader())
      dispatch(approvalProfilesSuccessNotification('Approval Profile deleted successfully'))
      dispatch(approvalProfilesListFetch())
    }, (error) => {
      dispatch(hideCommonLoader())
      handleErrorResponse(error, dispatch)
    });
  }

}

// handling error reponse   
const handleErrorResponse = (error, dispatch) => {
  try {
    if (error.response.status === 422 && error.response.data.error) {
      dispatch(validationError(error.response.data.error))
    }
    else if (error.response.status === 401 && error.response.data.error) {
      dispatch(tokenError(error.response.data.error.toString()))
    }
    else {
      let err = '';
      if (error.response.data.error) {
        err = error.response.data.error.toString()
      }
      else {
        err = error.response.status + ` ` + error.response.statusText
      }
      dispatch(approvalProfilesFailure(err))
    }
  }
  catch (e) {
    dispatch(approvalProfilesFailure('Unable to perform action.Something went wrong'))
  }
}   