import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import validate from 'validate.js';
import { makeStyles } from '@material-ui/styles';
import { Page, StyledFab, StyledButton } from 'components';
import {
  Header,
  ExtraFeildModel
} from './components';
import { 
  addActivitySetup,
  hideActivitySetupValidationError,
  addRemoveExtraFeild,
  redirectToActivitySetupList,
} from 'actions'
import { 
  Card, 
  CardHeader, 
  CardContent,
  TextField,
  Grid,
  FormControl,
  FormHelperText,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
 } from '@material-ui/core';
import CloseIcon from '@material-ui/icons/Close';
import Autocomplete from '@material-ui/lab/Autocomplete';
import CKEditor from '@ckeditor/ckeditor5-react'
import ClassicEditor from 'ckeditor5-custom-build/build/ckeditor';
import { isEmpty, find, remove } from 'lodash';
import useRouter from 'utils/useRouter';
import AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';
import SaveIcon from '@material-ui/icons/Save';
import CancelIcon from '@material-ui/icons/Cancel';
import { CK_CONFIGS } from 'configs';
import { ClientDropdown } from 'commonDropdowns';

const schema = {
  name: {
    presence: { allowEmpty: false, message: 'is required' },
  },
  unit_processing_time: {
    presence: { allowEmpty: false, message: 'is required' },
    numericality: {
      onlyInteger: true,
    }
  },
  passing_score: {
    presence: { allowEmpty: false, message: ' is required' },
    numericality: {
      greaterThanOrEqualTo: 0,
      lessThanOrEqualTo: 100,
    }
  },
  client_id: {
    presence: { allowEmpty: false, message: 'is required' },
  }
}

const useStyles = makeStyles(theme => ({
  root: {
    width: theme.breakpoints.values.lg,
    maxWidth: '100%',
    margin: '0 auto',
    padding: theme.spacing(3, 3, 6, 3)
  },
  projectDetails: {
    marginTop: theme.spacing(3)
  },
  formGroup: {
    marginBottom: theme.spacing(3)
  }
}));

const ActivitySetupAdd = () => {
  const classes = useStyles();
  const dispatch = useDispatch();
  const router = useRouter();
  const activitySetupState = useSelector(state => state.activitySetupState);
  const session = useSelector(state => state.session);

  const [ClientValue, setClientValue] = useState(null);
  const [openExtraFieldModel, setOpenExtraFieldModel] = React.useState(false);
  const [formState, setFormState] = useState({
    isValid: false,
    values: {
      'object_viewed_id': session.current_page_permissions.object_id,
      'passing_score': '100'
    },
    touched: {
      'object_viewed_id': true,
      'passing_score': true
    },
    errors: {}
  });

  
  useEffect(() => {
    const errors = validate(formState.values, schema);

    setFormState(formState => ({
      ...formState,
      isValid: errors ? false : true,
      errors: errors || {}
    }));
  }, [formState.values]);

  useEffect(() => {
    if(!isEmpty(activitySetupState.validation_error)){
      const errors = activitySetupState.validation_error;
      setFormState(formState => ({
        ...formState,
        isValid: errors ? false : true,
        errors: errors || {}
      }));
    }  
  }, [activitySetupState.validation_error]);

  useEffect(() => {
    if(activitySetupState.redirect_to_list){
      router.history.push('/activity-setup');
    } 
  }, [activitySetupState.redirect_to_list, router.history]);

  useEffect(() => { 
    if(!isEmpty(activitySetupState.addedExtraFeilds)){
      activitySetupState.addedExtraFeilds.map(added_extraFeild => {
        const stat = (formState) => {
          let feild = added_extraFeild.name;
          let f_label = added_extraFeild.field_label;
          
          let vals = {...formState.values};
          vals[feild] = f_label;

          let touch = {...formState.touched};
          touch[feild] = true;
          return {
            ...formState,
            values: vals,
            touched: touch
          }  
        }
        setFormState(stat);
        return true;
      })
    }  
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [activitySetupState.addedExtraFeilds.length]);

  const clientOnChange = (event, newValue) => {
    if(newValue){
      setClientValue(newValue)
      setClientId(newValue.id)
    }
    else{
      setClientValue(newValue)
      setClientId('')
    }
  }

  const setClientId = client_id => {
    setFormState(formState => ({
      ...formState,
      values: {
        ...formState.values,
        'client_id':client_id
      },
      touched: {
        ...formState.touched,
        'client_id': true
      }
    }));
    dispatch(hideActivitySetupValidationError('client_id'))
  }

  const setDescription = description => {
    setFormState(formState => ({
      ...formState,
      values: {
        ...formState.values,
        'description':description
      },
      touched: {
        ...formState.touched,
        'description': true
      }
    }));
    dispatch(hideActivitySetupValidationError('description'))
  }

  const handleChange = event => {
    event.persist();

    setFormState(formState => ({
      ...formState,
      values: {
        ...formState.values,
        [event.target.name]:
          event.target.type === 'checkbox'
            ? event.target.checked
            : event.target.value
      },
      touched: {
        ...formState.touched,
        [event.target.name]: true
      }
    }));
    dispatch(hideActivitySetupValidationError(event.target.name))
  }

  const handleSubmit = async event => {
    event.preventDefault();
    dispatch(addActivitySetup(formState.values));
  }

  const hasError = field =>
    formState.touched[field] && formState.errors[field] ? true : false;

  const removeExtraFeild = (feild_name) => {
    let a_feilds = activitySetupState.availableExtraFeilds;
    let added_feilds = activitySetupState.addedExtraFeilds;
    const item = find(added_feilds, ['name', feild_name]);
    a_feilds.push(item);
    remove(added_feilds, ['name', feild_name])
    dispatch(addRemoveExtraFeild(a_feilds, added_feilds));

    let touch = {...formState.touched};
    delete touch[feild_name];

    let vals = {...formState.values};
    delete vals[feild_name];
    setFormState(formState => ({
      ...formState,
      values: vals,
      touched: touch
    }));
  }
  
  return (
    <Page
      className={classes.root}
      title="Add Activity Setup"
    >
      <Header />
      <Card
        className={classes.projectDetails}
      >
        <CardHeader title="Add Activity Setup" />
        <CardContent>
        <form
          onSubmit={handleSubmit}
        >
          <div className={classes.formGroup}>
            <Grid container spacing={3}>
            <Grid item xs={6} sm={3}>
              <TextField
                error={hasError('name')}
                fullWidth
                helperText={hasError('name') ? formState.errors.name[0] : null}
                label="Activity Name"
                name="name"
                onChange={handleChange}
                value={formState.values.name || ''}
                variant="outlined"
                size="small"
              />
            </Grid> 
            <Grid item xs={6} sm={3}>
              <ClientDropdown
                ClientValue={ClientValue}
                setClientValue={setClientValue}
                id="client_id"
                name="client_id"
                clientOnChange={clientOnChange}
                renderInput={(params) => <TextField {...params} label="Select Client" variant="outlined" error={hasError('client_id')} helperText={hasError('client_id') ? formState.errors.client_id[0] : null} />}
              />
            </Grid>
            <Grid item xs={6} sm={3}>
              <TextField
                error={hasError('unit_processing_time')}
                fullWidth
                helperText={hasError('unit_processing_time') ? formState.errors.unit_processing_time[0] : null}
                label="Unit Processing Time (seconds)"
                name="unit_processing_time"
                onChange={handleChange}
                value={formState.values.unit_processing_time || ''}
                variant="outlined"
                InputProps={{ inputProps: { min: 0 } }}
                type="number"
                size="small"
              />
            </Grid> 
            <Grid item xs={6} sm={3}>
              <TextField
                error={hasError('passing_score')}
                fullWidth
                helperText={hasError('passing_score') ? formState.errors.passing_score[0] : null}
                label="Passing Percentage(%)"
                name="passing_score"
                onChange={handleChange}
                value={formState.values.passing_score || ''}
                variant="outlined"
                InputProps={{ inputProps: { min: 0 } }}
                type="number"
                size="small"
              />
            </Grid>
            
            </Grid>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                {!isEmpty(activitySetupState.addedExtraFeilds)?
                <TableContainer component={Paper}>
                  <Table className={classes.table} aria-label="simple table">
                    <TableHead>
                      <TableRow>
                        <TableCell>Name</TableCell>
                        <TableCell >Label</TableCell>
                        <TableCell align="right"></TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                    {activitySetupState.addedExtraFeilds.map(added_extraFeild => (
                      <TableRow key={added_extraFeild.name}>
                        <TableCell component="th" scope="row">
                          {added_extraFeild.name} ({added_extraFeild.type})
                        </TableCell>
                        <TableCell align="right">
                          <TextField
                            fullWidth
                            label="Extra Feild Label"
                            name={added_extraFeild.name}
                            onChange={handleChange}
                            value={(formState.values[added_extraFeild.name])? formState.values[added_extraFeild.name] : added_extraFeild.field_label}
                            variant="outlined"
                            size="small"
                          />
                        </TableCell>
                        <TableCell align="right">
                        <StyledFab
                          color="bdanger" aria-label="edit"
                          size="small"
                          onClick={() => removeExtraFeild(added_extraFeild.name)}
                        >
                          <CloseIcon />
                        </StyledFab>
                        </TableCell>
                      </TableRow>
                    ))}
                    </TableBody>
                  </Table>
                </TableContainer>
                :''}  
              </Grid>
            </Grid>
          </div>
          <div className={classes.formGroup}>
            <StyledButton
              color="bsuccess"
              type="button"
              variant="contained"
              onClick={() => setOpenExtraFieldModel(true)}
              size="small"
              startIcon={<AddCircleOutlineIcon />}
            >
              Add Extra Feilds
            </StyledButton>
          </div>
          <div className={classes.formGroup}>
            <CKEditor
              editor={ ClassicEditor }
              config={CK_CONFIGS(localStorage.getItem("token"))}
              data={formState.values.description || ''}
              onChange={ ( event, editor ) => {
                  const data = editor.getData();
                  setDescription(data)
              }}
            />
            <FormControl error={hasError('description')} >  
              <FormHelperText id="component-error-text">{hasError('description') ? formState.errors.description[0] : null}</FormHelperText>
            </FormControl> 
          </div>
          <StyledButton
            color="bprimary"
            disabled={!formState.isValid}
            size="small"
            type="submit"
            variant="contained"
            startIcon={<SaveIcon />}
          >
            Create Activity Setup
          </StyledButton>
          &nbsp; &nbsp;
          <StyledButton
            variant="contained"
            color="blight"
            size="small"
            onClick={ ()=>{ dispatch(redirectToActivitySetupList()) } }
            startIcon={<CancelIcon />}
          >
            CLOSE
          </StyledButton>
        </form>
          <ExtraFeildModel 
            modalOpen={openExtraFieldModel} 
            handleModalOpen={setOpenExtraFieldModel}
          />
        </CardContent>
      </Card>
      
    </Page>
  );
};

export default ActivitySetupAdd;
